type: edu
files:
  - name: __init__.py
    visible: false
    learner_created: false
  - name: task.py
    visible: true
    placeholders:
      - offset: 562
        length: 60
        placeholder_text: "...  # TODO реализовать обход в глубину итеративным способо\
      м"
        initial_state:
          length: 60
          offset: 562
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          visited = {node: False for node in g.nodes}
              d = deque()  # вершина стека справа
              path = []
          
              d.append(start_node)  # поджигаем узел графа
              visited[start_node] = True  # если узел "подожжен", то мы его посещали
              while d:
                  current_node = d.pop()  # снимаем узел с вершины стека
                  path.append(current_node)
                  for neighbor in g[current_node]:  # g[current_node] - смежные узлы
                      if not visited[neighbor]:
                          d.append(neighbor)  # добавляем узел на вершину стека
                          visited[neighbor] = True
          
              return path
        selected: false
        status: Unchecked
    learner_created: false
  - name: tests/__init__.py
    visible: false
    learner_created: false
  - name: tests/test_task.py
    visible: false
    learner_created: false
status: Unchecked
record: -1
